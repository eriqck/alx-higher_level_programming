
/***************************************************************************************************
Name: Giri Prasad Vasireddi
Project #3 – Linked Sequence Data Structure
Description: This project includes “enhanced” array classes that include features
             of both arrays and linked-lists(mainly a doubly-linked list). In this project,
             we're going to constructe a Sequence class that supports random access like an array,
             but also allows dynamic insertion and removal of new elements.

****************************************************************************************************/
#include "Sequence.h"

/* This constructor creates an empty sequence of given size. */
Sequence::Sequence(size_type sz)
{
    head = tail = NULL;
    SequenceNode *previous = head;
    for (size_type i = 1; i < sz - 1; i++)
    {
        SequenceNode *newNode = new SequenceNode;  // Creates an empty node. //
        newNode->prev = previous;
        previous->next = newNode;
        previous = newNode;
    }
    tail->prev = previous;
}

/* This constructor creates a sequene by taking another sequence as parameter.  */
Sequence::Sequence(const Sequence &s)
{
    head = tail = NULL;
    head = s.head;
    tail = s.tail;
}

Sequence::~Sequence()
{
    if (head != NULL)
    {
        SequenceNode *currentNode = head;

        while (currentNode != NULL)
        {
            SequenceNode *tempNode = currentNode; 
            currentNode = currentNode->next;
            delete tempNode;                    // Deletes the node and frees the memory allocated to it. //
        }
    }
}

/* Implemented assign operator.  */
